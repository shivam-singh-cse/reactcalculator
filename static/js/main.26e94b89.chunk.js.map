{"version":3,"sources":["DigitButton.js","OperationButton.js","App.js","index.js"],"names":["DigitButton","_ref","dispatch","digit","react_default","a","createElement","onClick","type","ACTIONS","ADD_DIGIT","payload","OperationButton","operation","CHOOSE_OPERATION","CLEAR","DELETE_DIGIT","EVALUATE","reducer","state","overwrite","Object","objectSpread","currentOperand","includes","concat","previousOperand","evaluate","length","slice","_ref2","prev","parseFloat","current","isNaN","computation","toString","INTEGER_FORMATTER","Intl","NumberFormat","maximumFractionDigits","formatOperand","operand","_operand$split","split","_operand$split2","slicedToArray","integer","decimal","format","App","_useReducer","useReducer","_useReducer2","_useReducer2$","className","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.26e94b89.chunk.js","sourcesContent":["import React from 'react'\r\nimport { ACTIONS } from './App'\r\nexport default function DigitButton({ dispatch, digit}) {\r\n    return (\r\n    <button onClick={() => dispatch({ type: ACTIONS.ADD_DIGIT, payload: {digit}})}>\r\n        {digit}\r\n        </button>\r\n    )\r\n}","import React from 'react'\r\nimport { ACTIONS } from './App'\r\nexport default function OperationButton({ dispatch, operation}) {\r\n    return (\r\n    <button onClick={() => dispatch({ type: ACTIONS.CHOOSE_OPERATION, payload: { operation }})}>\r\n        {operation}\r\n        </button>\r\n    )\r\n}","import React from \"react\"\nimport { useReducer } from \"react\"\nimport DigitButton from \"./DigitButton\"\nimport OperationButton from \"./OperationButton\"\nimport \"./index.css\"\n\n\nexport const ACTIONS = {\n  ADD_DIGIT: 'add-digit',\n  CHOOSE_OPERATION: 'choose-operation',\n  CLEAR: 'clear',\n  DELETE_DIGIT: 'delete-digit',\n  EVALUATE: 'evaluate'\n}\nfunction reducer(state, {type, payload}){\n // eslint-disable-next-line\n  switch(type) {\n    case ACTIONS.ADD_DIGIT:\n      if (state.overwrite) {\n        return {\n          ...state,\n          currentOperand: payload.digit,\n          overwrite: false,\n        }\n      }\n      if (payload.digit === \"0\" && state.currentOperand === \"0\") {\n        return state\n      }\n      if (payload.digit === \".\" && state.currentOperand.includes(\".\")) {\n        return state\n      }\n\n      return {\n        ...state,\n        currentOperand: `${state.currentOperand || \"\"}${payload.digit}` ,\n      }\n      case ACTIONS.CHOOSE_OPERATION:\n        if (state.currentOperand == null && state.previousOperand == null){\n          return state\n        }\n        if (state.currentOperand == null) {\n          return {\n            ...state,\n            operation: payload.operation,\n          }\n        }\n        if (state.previousOperand == null) {\n          return{\n            ...state,\n            operation: payload.operation,\n            previousOperand: state.currentOperand,\n            currentOperand: null\n          }\n        }\n        return {\n          ...state,\n          previousOperand: evaluate(state),\n          operation: payload.operation,\n          currentOperand: null\n        }\n      case ACTIONS.CLEAR:\n        return{}\n      case ACTIONS.DELETE_DIGIT:\n        if (state.overwrite) {\n          return {\n            ...state,\n            overwrite: false,\n            currentOperand: null\n          }\n        }\n        if (state.currentOperand == null) return state\n        if (state.currentOperand.length === 1){\n          return {...state, currentOperand: null}\n        }\n\n        return {\n          ...state,\n          currentOperand: state.currentOperand.slice(0, -1)\n        }\n\n      case ACTIONS.EVALUATE:\n        if (state.operation == null || state.currentOperand == null || state.previousOperand == null){\n          return state\n        }\n      \n        return {\n          ...state,\n          overwrite: true,\n          previousOperand: null,\n          operation: null,\n          currentOperand: evaluate(state)\n        }\n  }\n}\n\nfunction evaluate({currentOperand, operation, previousOperand}) {\n  const prev = parseFloat(previousOperand)\n  const current = parseFloat(currentOperand)\n  if (isNaN(prev) || isNaN(current)) return \"\"\n  let computation = \"\"\n  // eslint-disable-next-line\n  switch(operation) {\n    case \"+\":\n      computation = prev + current\n      break\n    case \"-\":\n      computation = prev - current\n      break\n    case \"*\":\n      computation = prev * current\n      break\n    case \"รท\":\n      computation = prev / current\n      break\n  }\n\n  return computation.toString()\n}\n\nconst INTEGER_FORMATTER = new Intl.NumberFormat(\"en-us\", {\n  maximumFractionDigits: 0,\n})\nfunction formatOperand(operand) {\n  if (operand == null) return\n  const [integer, decimal] = operand.split('.')\n  if (decimal == null) return INTEGER_FORMATTER.format(integer)\n  return `${INTEGER_FORMATTER.format(integer)}.${decimal}`\n}\nfunction App() {\n  const [{currentOperand, previousOperand, operation}, dispatch] = useReducer(reducer, {})\n\n  return (\n    <div className=\"calculator-grid\">\n      <div className=\"output\">\n        <div className=\"previous-operand\">{formatOperand(previousOperand)} {operation}</div>\n        <div className=\"current-operand\">{formatOperand(currentOperand)}</div>\n      </div>\n      <button className=\"span-two\" onClick={() => dispatch({ type: ACTIONS.CLEAR })}>AC</button>\n      <button onClick={() => dispatch({ type: ACTIONS.DELETE_DIGIT })}>DEL</button>\n      <OperationButton operation=\"รท\" dispatch={dispatch} />\n      <DigitButton digit=\"1\" dispatch={dispatch} />\n      <DigitButton digit=\"2\" dispatch={dispatch} />\n      <DigitButton digit=\"3\" dispatch={dispatch} />\n      <OperationButton operation=\"*\" dispatch={dispatch} />\n      <DigitButton digit=\"4\" dispatch={dispatch} />\n      <DigitButton digit=\"5\" dispatch={dispatch} />\n      <DigitButton digit=\"6\" dispatch={dispatch} />\n      <OperationButton operation=\"+\" dispatch={dispatch} />\n      <DigitButton digit=\"7\" dispatch={dispatch} />\n      <DigitButton digit=\"8\" dispatch={dispatch} />\n      <DigitButton digit=\"9\" dispatch={dispatch} />\n      <OperationButton operation=\"-\" dispatch={dispatch} />\n      <DigitButton digit=\".\" dispatch={dispatch} />\n      <DigitButton digit=\"0\" dispatch={dispatch} />\n     \n      <button className=\"span-two\"  onClick={() => dispatch({ type: ACTIONS.EVALUATE })}>=</button>\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}